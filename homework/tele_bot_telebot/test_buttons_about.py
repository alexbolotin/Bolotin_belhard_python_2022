from concurrent.futures import Executor
from email import message
import telebot
from telebot import types
from config import TOKEN, open_weatther_token
import requests
import datetime

bot = telebot.TeleBot(TOKEN)

def keyboard_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    item1 = types.KeyboardButton('/start')
    markup.add(item1)
    bot.send_message(message.chat.id, '–Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞?',reply_markup = markup)
    

def keyboard_main(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    item1 = types.KeyboardButton('test 1')
    item2 = types.KeyboardButton('test 2')
    item3 = types.KeyboardButton('test 3')
    item4 = types.KeyboardButton('–ü–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–µ–±–µ?')
    markup.add(item1, item2, item3, item4)
    bot.send_message(message.chat.id, '–¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —è —É–º–µ—é üôÇ',reply_markup = markup)
    

@bot.message_handler(commands = ['start'])
def welcome_user(message):
    keyboard_main(message)

@bot.message_handler(content_types = ['text'])
def bot_message(message):
    if message.text == 'test 1':
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ:')
        bot.register_next_step_handler(msg, change_message)

    elif message.text == 'test 2':
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:')
        bot.register_next_step_handler(msg, weather)

    elif message.text == 'test 3':
        msg = bot.send_message(message.chat.id, '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ 25 —Å–µ–∫—É–Ω–¥ üòî, –Ω–∞–ø–∏—à–∏ –º–Ω–µ,–≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –†–ë —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –∫—É—Ä—Å—ã: !!\n\
–ü.—Å. —á–µ–º –º–µ–Ω—å—à–µ –≥–æ—Ä–æ–¥ - —Ç–µ–º –º–µ–Ω—å—à–µ –∂–¥–∞—Ç—å üôÇ')
        bot.register_next_step_handler(msg, exchange)
        
    elif message.text == '–ü–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–µ–±–µ?':
        markup = telebot.types.ReplyKeyboardRemove()
        msg = bot.send_message(message.from_user.id, '–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–µ–±–µ, –Ω–∞–ø–∏—à–∏ +, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–µ–Ω?', reply_markup = markup)
        bot.register_next_step_handler(msg, info)

    elif message.text == '/start':
        msg = bot.send_message(message.chat.id, '–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –≤—Å–µ —Å –Ω–∞—á–∞–ª–∞! –ù–∞–∂–∏–º–∞–π –°—Ç–∞—Ä—Ç')
        bot.register_next_step_handler(msg, welcome_user(message))


def change_message(message):
    bot.send_message(message.chat.id, '–ø–æ–≥–æ–≤–æ—Ä–∏–º –ø–æ–∑–∂–µ!')

def weather(message):
    bot.send_message(message.chat.id, '–ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –ø–æ–≥–æ–¥–µ –ø–æ–∑–∂–µ!')
   

def exchange(message):
    bot.send_message(message.chat.id, '–ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –∫—É—Ä—Å–∞—Ö –ø–æ–∑–∂–µ!')


def info(message):
    text = message.text.lower()
    if text in ['–¥–∞','–¥–∞–≤–∞–π', 'yes', 'y', '–æ–∫', '—Å–æ–≥–ª–∞—Å–µ–Ω','+']:
        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        item1 = types.KeyboardButton('–∂–∏–≤–æ—Ç–Ω—ã–µ')
        item2 = types.KeyboardButton('—Ö–æ–±–±–∏')
        item3 = types.KeyboardButton('–º–∞—à–∏–Ω—ã')
        item4 = types.KeyboardButton('–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è')
        back = types.KeyboardButton('–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ')
        markup.add(item1, item2, item3, item4, back)
        msg = bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–µ–ª –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å:',reply_markup = markup)
        bot.register_next_step_handler(msg, info_choice)        
    else:
         bot.send_message(message.chat.id, '–∑–Ω–∞—á–∏—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑')
         keyboard_start(message)

def info_choice(message):
    if message.text == '–∂–∏–≤–æ—Ç–Ω—ã–µ':
        txt = '—É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ?'
        msg = info_choice_buttons(message,txt)
        bot.register_next_step_handler(msg, animals)

    elif message.text == '—Ö–æ–±–±–∏':
        pass

    elif message.text == '–º–∞—à–∏–Ω—ã':
         pass

    elif message.text == '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è':
         pass

    elif message.text == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ':
        bot.send_message(message.chat.id, f'–∑–Ω–∞—á–∏—Ç –ø–æ–≥–æ–≤–æ—Ä–∏–º –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑')
        keyboard_start(message)
        bot_message(message)

def info_choice_buttons(message,txt):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    item1 = types.KeyboardButton('–¥–∞')
    item2 = types.KeyboardButton('–Ω–µ—Ç')
    back = types.KeyboardButton('–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
    markup.add(item1, item2, back)
    msg = bot.send_message(message.chat.id, txt, reply_markup = markup)
    return msg

def animals(message):
    if message.text == '–¥–∞':
        markup = telebot.types.ReplyKeyboardRemove()
        msg = bot.send_message(message.from_user.id, '–Ω–∞–ø–∏—à–∏, –∫—Ç–æ —É —Ç–µ–±—è:', reply_markup = markup)
        bot.register_next_step_handler(msg, animals_end)
        
    elif message.text == '–Ω–µ—Ç':
        bot.send_message(message.chat.id, f'–º–æ–∂–µ—Ç –ø–æ—Ä–∞ –∑–∞–≤–µ—Å—Ç–∏, –Ω–æ —ç—Ç–æ —É–∂–µ —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–∞—è –∏—Å—Ç–æ—Ä–∏—è...')
        message.text = '–¥–∞'
        info(message)
    elif message.text == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        message.text = '–¥–∞'
        info(message)

def animals_end(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    back = types.KeyboardButton('–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
    markup.add(back)
    msg = bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç', reply_markup = markup)
    message.text = '–¥–∞'
    bot.register_next_step_handler(msg, info(message))

bot.polling(none_stop = True)  